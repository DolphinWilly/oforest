Improvements:
- Do we want functions and function application in Skins?
- For skin types, how should we add typeof operator?


Issues:
- (* TODO: Locate this error and add the warning string where it goes *)
    let warning_stri =
      Str.attribute ~loc @@ Ast_mapper.attribute_of_warning loc 
        "Warning 22: A delayed dependency is automatically forced since its dependent is not delayed" 
    in
    
- Equirecursive equality checking
- Why can't we use Str and Forest in the ppx code? (Including Utility)
-
(* Make sure thunks work right with predicates and path expressions:
 * E.g. For predicates, force correctly if there's a 'this' or make <f> where p = <f where p>?
 * For Path exps, I made  <_ :: f> -> _ :: <f>, but it's not obvious
 * this is exactly what we want.
 *)
- Is there a way to make the cursor abstract without breaking all
things?
- Since we don't require commutativity for costs, we need to make sure
the ordering is correct in comprehension calculation.
- Since it is important for the manifest generation whether we are
inside a manifest generation already or not, make sure that the
'inside' variable should be true for manifests in forest_new_gen where
'first' is not true.
- Fix URL loading/assure yourself that it is correct
-- What do we do with the path if URL loading is wrong for example.
- Add attributes to control various behaviors
-- 'NoCost' removing cost calculations
-- 'Non-Streaming' to keep information around after loading a cursor

Parsing:
Useful for parser testing:
(*
#mod_use "forest_types.ml";;
#mod_use "forest_parser.ml";;
#mod_use "forest_lexer.ml";;
let lexbuf = Lexing.from_string "d = directory { test is \"Woo\" ::  file } ";;
Forest_parser.prog Forest_lexer.read lexbuf;;
*)

Parser helper error suggestions?
(*
  lexbuf.lex_curr_p <- { lexbuf.lex_curr_p with pos_fname = filename };
let rec parse_and_print lexbuf =
  match parse_with_error lexbuf with
  | Some value ->
    printf "%a\n" Json.output_value value;
    parse_and_print lexbuf
  | None -> ()
*)

Oasis file:
#compiler-libs.common - Might need in future
#ppx_driver 

Functionality:
Ppx_forest_lib:
- Manifest
  (* TODO: Figure out what kinda errors we might have and implement them
   * - MD errors (No path, no permissions, etc? Or invalid of all the above)
     - Make a check_md function
   * -- Also check that dirname exists?
   * TODO: Fix storage during errors
   *)
-- PathExp
   (*TODO: Should this depend on ptype and whatnot, or is that all already in
   the meta data? I think it is...*)
-- Link
(* TODO: if not (Sys.file_exists rep) then Need to indicate failure here: nothing to link with *)
(* TODO: This can generate errors we should catch *)
(* TODO: Note that store_link may have issues with relative pathing... Maybe not though. 
* Do we want to indicate failure if they try to link with something not existent?
* Requires some extra info about the pathing...
* Re-look at store_link 
*)
-- Predicate
(* TODO: Add checks back in
[%expr
begin [@warning "-26"]
let (this,this_md) = (rep,md) in
let this_att = match this_md.info with
| Some(info) -> info
| None -> empty_info ""
in
let mani = [%e forest_manifest_gen true e vName] ~tmpdir:tmpdir (rep, md) in
if [%e exp_make_ocaml loc b] 
then mani 
else 
{storeFunc = mani.storeFunc;
tmppath = mani.tmppath;
errors = ("",PredicateFail) :: mani.errors
}
end][@metaloc loc] 
*)
-- main_setup
--- What to do with None info I guess is the question?
   (* TODO: This is probably not quite right. What do we want to store? What
   path do we associate the log error with? *)
-- What permissions should we give the temporary directories?
- Delay_checker
-- Vars
  (* TODO: Should we be more clever about vars? Checking them for
     delays for example? In that case, need to also make them load
     unincrementally in the special load func*)
- Dependency_grapher
-- Should we do something special if predicates contain chunks (maybe this
should be disallowed in the first place?)?
  (* Do something special if this is thunked?
  | Predicate(Thunked(fast),p) *)
-- Directory logic will break if multiple directories use the same names
   in one description



Skins:
- Implement equirecursive equality checking
- evalTypeGen (* TODO: Fix so it prints right location on type failure *)
- typeofH
-- Make sure HMap type is correct (should be?)
-- Make sure Variable type works fine if there is recursion
--
  (* TODO: Add in functions again?
  | HFun(var,h)     -> TBot
  | HApp(hfun,happ) ->  (* TODO: Needs to be implemented *)
      match hfun with
      | HVar("map") -> TTop
      | HVar(x)     -> TFun(Dirfun(x))
      | _ -> TBot (*raise_loc_err loc "General function application not yet implemented, just the special case map" *)
  *)
--
  (* TODO: Remember how to do fix points and things and add this in later
    let rec unfold hf = 
      match hf with
      | HFun(var,skin) -> typeofH ((var,happ) :: map) skin (* TODO: Think this can and will loop forever *)
      | HVar(var) -> (* TODO: Could be an infinite loop *)
        if List.mem_assoc var map
        then let h = List.assoc var map in
             unfold h
        else
          raise_loc_err loc (var ^ " is not a named skin")
      | _ -> TBot
    in
    unfold hfun
  *)


Forest lib:
- get_md_info
-- Errors
  (* TODO: Fails miserably if there are other errors, which is nice for 
   * our debugging but shouldn't be in final system *)
- load_file
-- Way to read in the data
   (* Core function would be great except that it adds a newline to the end :(
   let rep = Core.Std.In_channel.read_all path in *)

- store_x
-- We don't indicate failure in anyway. Not clear if we should be.
-- Maybe we should also switch to core functions.

Add back when you want to be able to generate printable description
(*
let forest_print_desc ?name:(name="forest_desc") (e : exp) : string =
  let open Printf in
  let rec print_desc e = 
    match e with
    | URL(_loc,e) -> "URL " ^ (print_desc e)
    | Pads(_loc, name)
    | Var(_loc,name) -> name
    | File(_loc) -> "file"
    | Link(_loc) -> "link"
    | PathExp(_loc,ptype,exp) -> 
      let s = 
          match ptype with 
          | Constant(pathi) -> sprintf "\"%s\" ::" pathi
          | Variable(pathi) -> sprintf "%s ::" pathi
          | OCaml_Expr(e) ->
            let s = 
              let buff = Bytes.create 1024 in
              let oldstdout = Unix.dup Unix.stdout in
              let (inp,newstdout) = Unix.pipe () in 
              Unix.dup2 newstdout Unix.stdout;
              Printers.OCaml.print_implem (Ast.StExp(_loc, e));
              flush stdout;
              let len = Unix.read inp buff 0 1024 in
              Unix.dup2 oldstdout Unix.stdout;
              Bytes.sub_string buff 0 (len-3)
            in
            sprintf "%s ::" s
      in
      String.concat " " [s;print_desc exp]
    | Thunked(_loc,exp) -> String.concat "" ["<";print_desc exp;">"]
    | Option(_loc, exp) -> String.concat " " [print_desc exp;"option"]
    | Directory (_loc, lst) -> 
      let len = (String.length name) + (String.length "directory { ") + 3 in
      let sList = List.map (fun (_loc,vname,exp) -> String.concat " " [sprintf "%s is" vname;print_desc exp]) lst in
      let s = String.concat (sprintf ";\n\t%*s" len "") sList in
      String.concat " " ["directory {";s;"}"]
    | Comprehension(_loc,glist,exp,bool) -> 
      let start = if bool then "Map [" else "[" in
      let sList = List.map (fun (_loc,gl) ->
        match gl with
        | Generator(vname,gen) -> 
          let s = 
            match gen with
            | Matches(_loc,Glob(str)) -> sprintf "GL \"%s\"" str 
            | Matches(_loc,Regex(str)) -> sprintf "RE \"%s\"" str
            | InList(_loc,e) -> (* TODO: Make this work with more bytes *)
              let buff = Bytes.create 1024 in
              let oldstdout = Unix.dup Unix.stdout in
              let (inp,newstdout) = Unix.pipe () in 
              Unix.dup2 newstdout Unix.stdout;
              Printers.OCaml.print_implem (Ast.StExp(_loc, e));
              flush stdout;
              let len = Unix.read inp buff 0 1024 in
              Unix.dup2 oldstdout Unix.stdout;
              Bytes.sub_string buff 0 (len-3)
          in
          String.concat " " [sprintf "%s <-" vname;s]
        | Guard(e) -> (* TODO: Make this work with more bytes *)
          let buff = Bytes.create 1024 in
          let oldstdout = Unix.dup Unix.stdout in
          let (inp,newstdout) = Unix.pipe () in 
          Unix.dup2 newstdout Unix.stdout;
          Printers.OCaml.print_implem (Ast.StExp(_loc, e));
          flush stdout;
          let len = Unix.read inp buff 0 1024 in
          Unix.dup2 oldstdout Unix.stdout;
          Bytes.sub_string buff 0 (len-3)
      ) glist 
      in
      let s = String.concat "," sList in
      String.concat " " [start;print_desc exp; "|"; s;"]"]
    | Predicate(_loc,e,b) -> 
      let buff = Bytes.create 4096 in
      let oldstdout = Unix.dup Unix.stdout in
      let (inp,newstdout) = Unix.pipe () in 
      Unix.dup2 newstdout Unix.stdout;
      Printers.OCaml.print_implem (Ast.StExp(_loc, b));
      flush stdout;
      let len = Unix.read inp buff 0 4096 in
      Unix.dup2 oldstdout Unix.stdout;
      let bstring = Bytes.sub_string buff 0 (len-3) in
      String.concat "" [print_desc e; " where ";bstring]
    | Special(_loc,_) -> failwith "Special constructs can't exist in forest descriptions"
  in
  String.concat "" ["\t";name;" = ";print_desc e]
  *)

ppx_forest_lib.ml:

In forest_new_gen, maybe we should match on paths and do different
  things? Solved by how thunks work I think.
  (*
  | PathExp( ptype,Var(l2,x)) -> 
    (match ptype with
    | Constant(pathi) ->
      [%expr: (fun path -> $lid:new_nameR x$ (Filename.concat path $str:pathi$ ))] 
    | Variable(pathi) ->
      [%expr: (fun path -> $lid:new_nameR x$ (Filename.concat path $lid:pathi$ ))] 
    | OCaml_Expr(e) -> 
      [%expr: (fun path -> $lid:new_nameR x$ (Filename.concat path $e$ ))] 
      )
     *)


Manifests:
For manifests in ppx_forest_lib.ml, forest_new_gen
               (*
               let sfunc ?dirname:(dirname="") ?basename:(basename="") () = 
               (* Makes the store function update dethunked value basically *)
                 if dirname = "" && basename = ""
                 then manifest.storeFunc ()
                 else if dirname = ""
                 then manifest.storeFunc ~basename:basename ()
                 else if basename = ""
                 then manifest.storeFunc ~dirname:dirname ()
                 else manifest.storeFunc ~basename:basename ~dirname:dirname ()
                 in
                 {tmppath = manifest.tmppath; storeFunc = manifest.sfunc; errors = manifest.errors}
               *)


Old apply function in Skins:

(*
let rec apply loc (s : exp) (d : dtree) : exp = 
  let apply = apply loc in
  match d with
  | DTDelay(d) -> Thunked(apply s d)
  | d -> 
    match s with
    | Thunked(_,s)
    | s            -> 
      match (s,d) with (* TODO: Maybe we actually want original loc locations to get better debug info? *)
      (* Sanity check *)
      | File _,DTCons(DTFile) -> File(loc)
      | Link _,DTCons(DTLink) -> Link(loc)
      | Var(loc2,sx),DTCons(DTRec(dx)) when sx=dx -> Var(sx)
      | Pads(loc2,sx),DTCons(DTPads(dx)) when sx=dx -> Pads(sx)

      | Predicate(loc2,s,expr),DTPred(d) -> Predicate(apply s d,expr)
      | Option(loc2,s),DTOpt(d) -> Option(apply s d)
      | Comprehension(loc2,l,s,b),DTComp(d) -> Comprehension(l,apply s d,b)
      | PathExp(loc2,pt,s),d (* PATHREM DTPath(d)*) -> PathExp(pt,apply s d) 
      | Directory(loc2,slist),DTDir(dlist) ->
        let newl = List.fold_right2 (fun (_,lbl,s) (_,d) acc -> (lbl,apply s d) :: acc) slist dlist [] in
        Directory(newl)
      | Var(x),d -> (* TODO: Fix this *)
          if Hashtbl.mem forestTbl x
          then let (_l,_,s) = Hashtbl.find forestTbl x in
               apply s d
          else raise_loc_err loc (Printf.sprintf "%s is not a forest description.%s" x (debug_out (" d=" ^ (dtget_name d))))
      | URL(_,s),d -> URL(apply s d)
      | _ -> raise_loc_err loc 
        ("Failure in skin application. Type checking is not sound w.r.t. function application, so that's probably the issue."  ^
        (debug_out ("s=" ^ (sget_name s) ^ " d=" ^ (dtget_name d))))
*)
