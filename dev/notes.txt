Improvements:
- Do we want functions and function application in Skins?
- For skin types, how should we add typeof operator?


Issues:
- Why can't we use Str and Forest in the ppx code?
-
(* Make sure thunks work right with predicates and path expressions:
 * E.g. For predicates, force correctly if there's a 'this' or make <f> where p = <f where p>?
 * For Path exps, I made  <_ :: f> -> _ :: <f>, but it's not obvious
 * this is exactly what we want.
 *)
- Is there a way to make the cursor abstract without breaking all
things?
- Since we don't require commutativity for costs, we need to make sure
the ordering is correct in comprehension calculation.
- Since it is important for the manifest generation whether we are
inside a manifest generation already or not, make sure that the
'inside' variable should be true for manifests in forest_new_gen where
'first' is not true.
- Fix URL loading/assure yourself that it is correct
-- What do we do with the path if URL loading is wrong for example.

Parsing:
Useful for parser testing:
(*
#mod_use "forest_types.ml";;
#mod_use "forest_parser.ml";;
#mod_use "forest_lexer.ml";;
let lexbuf = Lexing.from_string "d = directory { test is \"Woo\" ::  file } ";;
Forest_parser.prog Forest_lexer.read lexbuf;;
*)

Parser helper error suggestions?
(*
  lexbuf.lex_curr_p <- { lexbuf.lex_curr_p with pos_fname = filename };
let rec parse_and_print lexbuf =
  match parse_with_error lexbuf with
  | Some value ->
    printf "%a\n" Json.output_value value;
    parse_and_print lexbuf
  | None -> ()
*)

Oasis file:
#compiler-libs.common - Might need in future
#ppx_driver 

Functionality:
Add back when you want to be able to generate printable description
(*
let forest_print_desc ?name:(name="forest_desc") (e : exp) : string =
  let open Printf in
  let rec print_desc e = 
    match e with
    | URL(_loc,e) -> "URL " ^ (print_desc e)
    | Pads(_loc, name)
    | Var(_loc,name) -> name
    | File(_loc) -> "file"
    | Link(_loc) -> "link"
    | PathExp(_loc,ptype,exp) -> 
      let s = 
          match ptype with 
          | Constant(pathi) -> sprintf "\"%s\" ::" pathi
          | Variable(pathi) -> sprintf "%s ::" pathi
          | OCaml_Expr(e) ->
            let s = 
              let buff = Bytes.create 1024 in
              let oldstdout = Unix.dup Unix.stdout in
              let (inp,newstdout) = Unix.pipe () in 
              Unix.dup2 newstdout Unix.stdout;
              Printers.OCaml.print_implem (Ast.StExp(_loc, e));
              flush stdout;
              let len = Unix.read inp buff 0 1024 in
              Unix.dup2 oldstdout Unix.stdout;
              Bytes.sub_string buff 0 (len-3)
            in
            sprintf "%s ::" s
      in
      String.concat " " [s;print_desc exp]
    | Thunked(_loc,exp) -> String.concat "" ["<";print_desc exp;">"]
    | Option(_loc, exp) -> String.concat " " [print_desc exp;"option"]
    | Directory (_loc, lst) -> 
      let len = (String.length name) + (String.length "directory { ") + 3 in
      let sList = List.map (fun (_loc,vname,exp) -> String.concat " " [sprintf "%s is" vname;print_desc exp]) lst in
      let s = String.concat (sprintf ";\n\t%*s" len "") sList in
      String.concat " " ["directory {";s;"}"]
    | Comprehension(_loc,glist,exp,bool) -> 
      let start = if bool then "Map [" else "[" in
      let sList = List.map (fun (_loc,gl) ->
        match gl with
        | Generator(vname,gen) -> 
          let s = 
            match gen with
            | Matches(_loc,Glob(str)) -> sprintf "GL \"%s\"" str 
            | Matches(_loc,Regex(str)) -> sprintf "RE \"%s\"" str
            | InList(_loc,e) -> (* TODO: Make this work with more bytes *)
              let buff = Bytes.create 1024 in
              let oldstdout = Unix.dup Unix.stdout in
              let (inp,newstdout) = Unix.pipe () in 
              Unix.dup2 newstdout Unix.stdout;
              Printers.OCaml.print_implem (Ast.StExp(_loc, e));
              flush stdout;
              let len = Unix.read inp buff 0 1024 in
              Unix.dup2 oldstdout Unix.stdout;
              Bytes.sub_string buff 0 (len-3)
          in
          String.concat " " [sprintf "%s <-" vname;s]
        | Guard(e) -> (* TODO: Make this work with more bytes *)
          let buff = Bytes.create 1024 in
          let oldstdout = Unix.dup Unix.stdout in
          let (inp,newstdout) = Unix.pipe () in 
          Unix.dup2 newstdout Unix.stdout;
          Printers.OCaml.print_implem (Ast.StExp(_loc, e));
          flush stdout;
          let len = Unix.read inp buff 0 1024 in
          Unix.dup2 oldstdout Unix.stdout;
          Bytes.sub_string buff 0 (len-3)
      ) glist 
      in
      let s = String.concat "," sList in
      String.concat " " [start;print_desc exp; "|"; s;"]"]
    | Predicate(_loc,e,b) -> 
      let buff = Bytes.create 4096 in
      let oldstdout = Unix.dup Unix.stdout in
      let (inp,newstdout) = Unix.pipe () in 
      Unix.dup2 newstdout Unix.stdout;
      Printers.OCaml.print_implem (Ast.StExp(_loc, b));
      flush stdout;
      let len = Unix.read inp buff 0 4096 in
      Unix.dup2 oldstdout Unix.stdout;
      let bstring = Bytes.sub_string buff 0 (len-3) in
      String.concat "" [print_desc e; " where ";bstring]
    | Special(_loc,_) -> failwith "Special constructs can't exist in forest descriptions"
  in
  String.concat "" ["\t";name;" = ";print_desc e]
  *)

ppx_forest_lib.ml:

In forest_new_gen, maybe we should match on paths and do different
  things? Solved by how thunks work I think.
  (*
  | PathExp( ptype,Var(l2,x)) -> 
    (match ptype with
    | Constant(pathi) ->
      [%expr: (fun path -> $lid:new_nameR x$ (Filename.concat path $str:pathi$ ))] 
    | Variable(pathi) ->
      [%expr: (fun path -> $lid:new_nameR x$ (Filename.concat path $lid:pathi$ ))] 
    | OCaml_Expr(e) -> 
      [%expr: (fun path -> $lid:new_nameR x$ (Filename.concat path $e$ ))] 
      )
     *)


Manifests:
For manifests in ppx_forest_lib.ml, forest_new_gen
               (*
               let sfunc ?dirname:(dirname="") ?basename:(basename="") () = 
               (* Makes the store function update dethunked value basically *)
                 if dirname = "" && basename = ""
                 then manifest.storeFunc ()
                 else if dirname = ""
                 then manifest.storeFunc ~basename:basename ()
                 else if basename = ""
                 then manifest.storeFunc ~dirname:dirname ()
                 else manifest.storeFunc ~basename:basename ~dirname:dirname ()
                 in
                 {tmppath = manifest.tmppath; storeFunc = manifest.sfunc; errors = manifest.errors}
               *)
