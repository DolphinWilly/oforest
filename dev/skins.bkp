(*
type dtcons = 
  | DTFile
  | DTLink
  | DTRec of varname
  | DTPads of varname

type dtree =
  | DTDelay of loc * dtree
  | DTPred of loc * dtree (* PATHREM
  | DTPath of loc * dtree *)
  | DTComp of loc * dtree
  | DTOpt of loc * dtree
  | DTDir of loc * (string * dtree) list
  | DTCons of loc * dtcons

type typFun =
  | Typeof of varname
  | Dirfun of varname
*)


let rec print_skin d h =
  if d > 5
  then ""
  else
    let open Printf in
    let ps = print_skin d in
    match h with 
    | HDelay _           -> "<>"
    | HUndelay _         -> "><"
    | HNegate _          -> "~"
    | HId _              -> "_"(* PATHREM
    | HPath(_,h)         -> sprintf "Path(%s)" (ps h) *)
    | HComp(_,h)         -> sprintf "Comp(%s)" (ps h)
    | HOpt(_,h)          -> sprintf "Opt(%s)" (ps h)
    | HPair(_,h1,h2)     -> sprintf "Pair(%s,%s)" (ps h1) (ps h2)

    | HType(_,h,t)       -> sprintf "HIf(%s)" (ps h)
    | HTypeF(_,h,t)      -> sprintf "HIFF(%s)" (ps h)
    | HVar(_,x)          -> 
      if Hashtbl.mem skinTbl x
      then let (_,_,h) = Hashtbl.find skinTbl x in
           print_skin (d+1) h
      else x
    | HSeq(_,h1,h2)      -> sprintf "Seq(%s,%s)" (ps h1) (ps h2)
    | HAlt(_,h1,h2)      -> sprintf "Alt(%s,%s)" (ps h1) (ps h2)
    | HFun(_,x,h2)       -> sprintf "Fun(%s,%s)" x (ps h2)
    | HApp(_,h1,h2)      -> sprintf "App(%s,%s)" (ps h1) (ps h2)

let dtget_name = function
  | DTDelay _           -> "delay"
  | DTPred _            -> "predicate" (*PATHREM
  | DTPath _            -> "path"*)
  | DTComp _            -> "comprehension"
  | DTOpt _             -> "option"
  | DTDir _             -> "dir"
  | DTCons(_,DTFile)    -> "file"
  | DTCons(_,DTLink)    -> "link"
  | DTCons(_,DTRec(_))  -> "rec"
  | DTCons(_,DTPads(x)) -> x


(* Pre-Removing locs 
let rec dtreeof loc b name s =
  let dt = dtreeof loc b name in
  match s with
  | Pads(x)              -> DTCons(DTPads(x))
  | File(loc)                -> DTCons(DTFile)
  | Link(loc)                -> DTCons(DTLink)

  | Predicate(e,expr)    -> DTPred(dt e)
  | Option(e)            -> DTOpt(dt e)
  | Comprehension(l,e,b) -> DTComp(dt e)
  | PathExp(pathType,e)  -> DTPath(dt e)
  | Thunked(e)           -> DTDelay(dt e)
  | Directory(es)        -> DTDir(List.map (fun (_,lbl,e) -> (lbl,dt e)) es)
  | Var(x)               ->  (* TODO: Broken. Need to make a new func in case of a recursive call *)
    if b && x = name (* If x is the top level function *)
    then DTCons(DTRec(x))
    else if Hashtbl.mem forestTbl x
    then  (* TODO: Make sure this is right *)
      let (x,e) = Hashtbl.find forestTbl x in
      let r = rec_check x e in (* Check recursivity *)
      if not r
      then dtreeof false x e
      else raise_loc_err loc "TODO: Recursive internal skins are unimplemented"
      (* Need to do something clever for recursive functions, probably introduce a new internal function. Gross *)
    else raise_loc_err loc (Printf.sprintf "%s is not a defined forest description\n" x)
  | Special(spec)        -> raise_loc_err loc "Special constructs can't exist in forest descriptions" 
    *)

let rec dtreeof loc b name s =
  let dt = dtreeof loc b name in
  match s with
  | Pads(_,x)              -> DTCons(DTPads(x))
  | File(_)                -> DTCons(DTFile)
  | Link(_)                -> DTCons(DTLink)
  | URL(_, e)              -> dt e
  | Predicate(_,e,expr)    -> DTPred(dt e)
  | Option(_,e)            -> DTOpt(dt e)
  | Comprehension(_,l,e,b) -> DTComp(dt e) 
  | PathExp(_,pathType,e)  -> dt e (* PATHREM DTPath(dt e)*)
  | Thunked(_,e)           -> DTDelay(dt e) 
  | Directory(_,es)        -> DTDir(List.map (fun (_,lbl,e) -> (lbl,dt e)) es)
  | Var(_,x)               ->  (* TODO: Broken. Need to make a new func in case of a recursive call *)
    if b && x = name (* If x is the top level function *)
    then DTCons(DTRec(x))
    else if Hashtbl.mem forestTbl x
    then  (* TODO: Make sure this is right *)
      let (_,x,e) = Hashtbl.find forestTbl x in
      let r = rec_check x e in (* Check recursivity *)
      if not r
      then dtreeof loc false x e
      else raise_loc_err loc "TODO: Recursive internal skins are unimplemented"
      (* Need to do something clever for recursive functions, probably introduce a new internal function. Gross *)
    else raise_loc_err loc (Printf.sprintf "%s is not a defined forest description" x)
  | Special(_,spec)        -> raise_loc_err loc "Special constructs can't exist in forest descriptions" 

let rec typeofD = function
  | DTDelay(d)      -> typeofD d
  | DTPred(d)       -> TOr(TCons(TPred),typeofD d) (* This is a gross hack *)
  | DTCons(DTFile)  -> TCons(TFile)
  | DTCons(DTLink)  -> TCons(TLink)
  | DTCons(DTRec _) -> TCons(TRec)
  | DTCons(DTPads x)-> TCons(TPads x)

  | DTDir(l)        -> List.fold_right (fun (s,d) acc -> TPair(typeofD d,acc)) l (TTop(loc))
  | DTOpt(d)        -> TOpt(typeofD d)
  | DTComp(d)       -> TComp(typeofD d)(* PATHREM
  | DTPath(d)       -> TPath(typeofD d)*)

let rec evalTypeGen t d = (* TODO: Fix so it prints right location on type failure *)
  match d with
  | DTDelay(_,d) -> evalTypeGen t d
  | d ->
    let cons_check t d =
      match t,d with
      | TFile,DTFile
      | TLink,DTLink
      | TRec,DTRec _                  -> true
      | TPads(x),DTPads(y) when x = y -> true
      | _ -> false
    in
    match t,d with
    | TTop _,_ -> true,""
    | TBot(_),_ -> false,"Either expected a function in a function application or got a function without a function application"
    | TCons(TPred),DTPred(loc1,dt) -> true,""
    | TCons(tc),DTCons(loc1,dc) -> if cons_check tc dc then true,"" else false,(get_std_err t d)
    | TNot(t),d ->
      let (b,m) = evalTypeGen t d in
      if b
      then false,(get_err "Got %s, but expected to not match %s" t d)
      else true,""
    | TOr(t1,t2),d ->
      let (b1,m1) = evalTypeGen t1 d in
      let (b2,m2) = evalTypeGen t2 d in
      if b1 || b2
      then true,""
      else false,(Printf.sprintf "Expected %s to match %s or %s" (dtget_name d) (tget_name t1) (tget_name t2))
    | TAnd(t1,t2),d ->
      let (b1,m1) = evalTypeGen t1 d in
      let (b2,m2) = evalTypeGen t2 d in
      if b1 && b2
      then true,""
      else if not b1
      then false,m1
      else false,m2
    | _,DTPred(_,d2) -> evalTypeGen t d2(* PATHREM
    | TPath(t),DTPath(loc1,d) -> evalTypeGen t d *)
    | TOpt(t),DTOpt(loc1,d)   -> evalTypeGen t d
    | TComp(t),DTComp(loc1,d) -> evalTypeGen t d
    | TPair(t1,t2),DTDir(loc1,(s,dh) :: dtl)  -> 
      let b,m = evalTypeGen t1 dh in
      if b
      then evalTypeGen t2 (DTDir(loc1,dtl))
      else false,m
    | TPair(t1,t2),DTDir(loc1,[]) -> false,"More directory entries in skin than description"    
    | TFun(Typeof(x)),d -> 
      if Hashtbl.mem forestTbl x
      then let (_,x,e) = Hashtbl.find forestTbl x in
           evalTypeGen (typeofD (dtreeof loc true x e)) d (* TODO: Not sure this should be true *)
      else raise_loc_err loc (Printf.sprintf "%s is not a named forest description" x)
    | TFun(Dirfun(x)),DTDir(loc1,dlist) ->
      if List.exists (fun (s,h) -> s = x) dlist
      then true,""
      else false,"Directory didn't contain " ^ x
    | _ -> false,get_std_err t d


let evalType t d = fst (evalTypeGen t d)

let evalTypeF loc t d = 
  let (b,msg) = (evalTypeGen t d) in
  if b then b else raise_loc_err loc (Printf.sprintf "%s" msg)

let rec typeofH map h =
  match h with
  | HDelay(loc)         -> TTop(loc)
  | HUndelay(loc)       -> TTop(loc)
  | HNegate(loc)        -> TTop(loc)
  | HId(loc)            -> TTop(loc)

  | HPair(t1,t2)    -> TPair(typeofH map t1, typeofH map t2)
  | HOpt(h)         -> TOpt(typeofH map h)
  | HComp(h)        -> TComp(typeofH map h)(* PATHREM
  | HPath(h)        -> TPath(typeofH map h)*)
  | HType(h,t)      -> TOr(TNot(t),typeofH map h)
  | HTypeF(h,t)     -> TAnd(t,typeofH map h)
  | HSeq(h1,h2)     -> TAnd(typeofH map h1,typeofH map h2)
  | HAlt(h1,h2)     -> TOr(typeofH map h1,typeofH map h2)

  | HVar(var)       -> (* TODO: Make sure this works right in presence of recursion *)
    if List.mem_assoc var map
    then let h = List.assoc var map in
         typeofH map h
    else
      raise_loc_err loc (var ^ " is not a named skin")
  | HFun(var,h)     -> TBot(loc)
  | HApp(hfun,happ) ->  (* TODO: Needs to be implemented *)
      match hfun with
      | HVar("map") -> TTop(loc)
      | HVar(x)     -> TFun(Dirfun(x))
      | _ -> TBot(loc) (*raise_loc_err loc "General function application not yet implemented, just the special case map" *)
    

  (* TODO: Remember how to do fix points and things and add this in later
    let rec unfold hf = 
      match hf with
      | HFun(var,skin) -> typeofH ((var,happ) :: map) skin (* TODO: Think this can and will loop forever *)
      | HVar(var) -> (* TODO: Could be an infinite loop *)
        if List.mem_assoc var map
        then let h = List.assoc var map in
             unfold h
        else
          raise_loc_err loc (var ^ " is not a named skin")
      | _ -> TBot(loc)
    in
    unfold hfun
  *)

